@startuml Manage Authentication

title "Manage Authentication"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:auth" as auth
participant "<<middleware>>\n:auth" as middleware
participant "<<service>>\n:jwt" as jwt
participant "<<controllers>>\n:auth" as controllersUser
participant "<<model>>\n:users" as modelUser
participant "<<model>>\n:appointment" as modelAppointment
database "<<MongoDB>>\n:users" as userDatabase
database "<<MongoDB>>\n:appointment" as appointmentDatabase

client->server ++:req.post('auth/register')
server->auth --++:app.use('api/v1/auth',auth)
auth -> controllersUser --++:register
controllersUser->modelUser ++:create({name,tel,email,\npassword,role})
modelUser ->userDatabase ++: UserSchema
userDatabase --> modelUser --: user
controllersUser <-- modelUser --:user
controllersUser->client --:response

client->server ++:req.post('auth/login')
server->auth --++:app.use('api/v1/auth',auth)
auth -> controllersUser --++:login
controllersUser->modelUser ++:findOne({email})
modelUser ->userDatabase ++: UserSchema
userDatabase --> modelUser --:user
controllersUser <-- modelUser --:user
controllersUser->client --:response

client->server ++:req.get('auth/logout')
server->auth --++:app.use('api/v1/auth',auth)
auth -> controllersUser --++:logout
controllersUser->client --:response

client->server ++:req.get('auth/login')
server->auth --++:app.use('api/v1/auth',auth)
auth->middleware ++:protect
middleware->jwt ++:verify(token,secret)
jwt-->middleware --: decoded
middleware->modelUser ++:findById(decoded.id)
modelUser -> userDatabase ++:find(_id:decoded.id)
userDatabase --> modelUser --:user
modelUser-->middleware --:req.user
middleware-->auth --:next
auth -> controllersUser --++:getMe
controllersUser->modelUser ++:findById(user.id)
modelUser ->userDatabase ++:UserSchema
userDatabase --> modelUser --:user
controllersUser <-- modelUser --:user
controllersUser->client --:response

client->server ++:req.get('auth/appointment')
server->auth --++:app.use('api/v1/auth',auth)
auth->middleware ++:protect
middleware->jwt ++:verify(token,secret)
jwt-->middleware --: decoded
middleware->modelUser ++:findById(decoded.id)
modelUser -> userDatabase ++:find(_id:decoded.id)
userDatabase --> modelUser --:user
modelUser-->middleware --:req.user
middleware-->auth --:next
auth -> controllersUser --++:getMyAppointment
controllersUser -> modelAppointment ++:find({ user: req.user.id })\n.populate({path: "hotel",\nselect: "name address tel",})
modelAppointment -> appointmentDatabase ++: AppointmentSchema
appointmentDatabase --> modelAppointment --: appointment
modelAppointment --> controllersUser --: appointment
controllersUser -> client --: response

client->server ++:req.get('auth/wifi')
server->auth --++:app.use('api/v1/auth',auth)
auth->middleware ++:protect
middleware->jwt ++:verify(token,secret)
jwt-->middleware --: decoded
middleware->modelUser ++:findById(decoded.id)
modelUser -> userDatabase ++:find(_id:decoded.id)
userDatabase --> modelUser --:user
modelUser-->middleware --:req.user
middleware-->auth --:next
auth -> controllersUser --++:getMyWifiPassword
controllersUser -> modelAppointment ++:find({user:req.user.id})
modelAppointment -> appointmentDatabase ++:AppointmentSchema
appointmentDatabase --> modelAppointment --:appointment
modelAppointment --> controllersUser --:appointment
controllersUser -> client --:response

client->server ++:req.post('auth/wifi')
server->auth --++:app.use('api/v1/auth',auth)
auth->middleware ++:protect
middleware->jwt ++:verify(token,secret)
jwt-->middleware --: decoded
middleware->modelUser ++:findById(decoded.id)
modelUser -> userDatabase ++:find(_id:decoded.id)
userDatabase --> modelUser --:user
modelUser-->middleware --:req.user
middleware-->auth --:next
auth -> controllersUser --++:loginToWifi
controllersUser->modelUser ++:findOne({email})
modelUser-->controllersUser --:user
controllersUser->client :response
controllersUser->modelAppointment ++:find({user:user._id})
modelAppointment->appointmentDatabase ++:AppointmentSchema
appointmentDatabase-->modelAppointment --:appointment
modelAppointment-->controllersUser --:appointment
controllersUser->client --:response
@enduml
